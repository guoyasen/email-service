spring:
  datasource:
    driver-class-name: oracle.jdbc.OracleDriver
    url: jdbc:oracle:thin:@10.132.122.216:1521/coitdb
    username: csdev
    password: Csdev#2020
    druid:
      max-active: 8
      min-idle: 2
      test-while-idle: true
      time-between-eviction-runs-millis: 900000
      validation-query: select 1 from dual
#  quartz:
#    cron:
#      update-privilege-job: 0/5 * * * * ?
#      session-clear-job: 0/5 * * * * ?
#      update-user-notice-job: 0/5 * * * * ?
  kafka:
    bootstrap-servers: 10.132.122.243:9092
    producer:
      retries: 2 #发送失败后的重复发送次数
      key-serializer: org.apache.kafka.common.serialization.StringSerializer #key序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer #value序列化方式
      compression-type: gzip #压缩格式
      batch-size: 16384 #批量发送的消息数量
      buffer-memory: 33554432 #32M的批处理缓冲区
    consumer:
      auto-offset-reset: earliest #最早未被消费的offset
      enable-auto-commit: false #是否开启自动提交
      #auto-commit-interval: 1000 #自动提交的时间间隔
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer #key解码方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer #value解码方式
      group-id: kafka.consumer.group.id.1
      max-poll-records: 50
      topic: boi_inst_instruction_email
      properties:
        session-timeout-ms: 20000 #连接超时时间
        max-poll-interval-ms: 15000 #手动提交设置与poll的心跳数,如果消息队列中没有消息，等待毫秒后，调用poll()方法。如果队列中有消息，立即消费消息，每次消费的消息的多少可以通过max.poll.records配置。
        max-partition-fetch-bytes: 15728640 #设置拉取数据的大小 15M
    client-id: kafkacli
    listener:
      ack-mode: manual_immediate

  cloud:
    stream:
      bindings:
        message_center_out:
          destination: email-service_out_dev
          content-type: application/json
        message_center_in:
          destination: email-service_out_dev
          content-type: application/json
          group: email-service-dev
      kafka:
        binder:
          brokers: 10.132.122.243:9092
  # 邮箱服务器配置，以163邮箱为例
  mail:
    host: crmail.crc.com.cn #邮箱服务器地址
    port: 25 #端口
    username: crct_securities@crctrust.com
    password: Mkt2021!
    default-encoding: UTF-8
    properties:
      from: crct_securities@crctrust.com
      mail:
        smtp:
          connectiontimeout: 5000
          timeout: 3000
          writetimeout: 5000

  # 邮件模板
  thymeleaf:
    cache: false
    prefix: classpath:/views/
  # 邮件附件
  servlet:
    multipart:
      max-file-size: 10MB #限制单个文件大小
      max-request-size: 50MB #限制请求总量

quantex:
  application:
    name: email-service
    jwt-secret: quantex
#  redis:
#    configs:
#      web:
#        host: 10.116.18.151
#        port: 6379
#        database: 10
#  eventbus:
#    host: 10.116.18.151
#    port: 5672
#    username: eventuser
#    password: "@event2016"
#    virtual-host: /eventbustest
  mybatis:
    mapper-locations:
#    - classpath:com/iquantex/web/framework/dao/basexml/*.xml
#    - classpath:com/iquantex/web/framework/dao/xml/*.xml
#    - classpath:com/iquantex/msgcenter/dao/basexml/*.xml
    type-aliases-packages:
#    - com.iquantex.web.framework.model
#    - com.iquantex.msgcenter.model
    base-packages:
#    - com.iquantex.web.framework.dao.java
#    - com.iquantex.msgcenter.dao.java
    properties:
      ORDER: BEFORE

eureka:
  client:
    enabled: true
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://eureka.dev-debug.boi.crctrust.com/eureka/
    registry-fetch-interval-seconds: 10
  instance:
    lease-renewal-interval-in-seconds: 10
    health-check-url-path: /actuator/health
    prefer-ip-address: true
    hostname: email-service
    metadata-map:
      management:
        context-path: ${server.servlet.context-path}/actuator

# 邮件失败重试次数
com:
  example:
    mail:
      sendNumber: 3 #邮件发送失败重试次数
      threadKillTime: 60 #线程超时杀死

# 异步线程配置,配置核心线程数
async:
  executor:
    thread:
      core_pool_size: 15 #核心线程数量，线程池创建时候初始化的线程数
      max_pool_size: 15 #最大线程数，只有在缓冲队列满了之后才会申请超过核心线程数的线程
      queue_capacity: 99999 #缓冲队列，用来缓冲执行任务的队列
      keep_alive_seconds: 60 #当超过了核心线程出之外的线程在空闲时间到达之后会被销毁
      await_termination_seconds: 30 #设置线程池中任务的等待时间，如果超过这个时候还没有销毁就强制销毁，以确保应用最后能够被关闭，而不是阻塞住。
      name:
        prefix: async-service-
        prefixson: async-service-son
